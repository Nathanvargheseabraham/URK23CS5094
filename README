üè• Hospital Management System ‚Äî Theoretical Explanation
üîπ 1. Introduction
A Hospital Management System (HMS) is software that facilitates the efficient management of hospital operations, such as patient registration, doctor registration, appointment scheduling, and records viewing. In this project, a Java-based GUI application using Swing components is created and connected to a MySQL database for persistent storage of patient, doctor, and appointment information.

üîπ 2. Objectives
To create an interactive GUI application for hospital workflow automation.

To allow registration of patients and doctors.

To enable scheduling of appointments between patients and doctors.

To store and retrieve data using a MySQL database.

To demonstrate integration between frontend (Java Swing) and backend (MySQL).

üîπ 3. System Architecture
This application follows a simple two-tier architecture:

pgsql
CopyEdit
+-----------------------+        +------------------------+
|    Java Swing GUI     | <----> |   MySQL Database       |
| (Frontend + Backend)  |        | (Data Storage Layer)   |
+-----------------------+        +------------------------+
Frontend: Java Swing components for user input and data display.

Backend: JDBC (Java Database Connectivity) to interact with MySQL database.

üîπ 4. Key Features and Functional Modules
1. Patient Registration
Takes inputs: Name, Age, Disease.

Inserts the data into the patients table in the database.

2. Doctor Registration
Takes inputs: Name, Specialization.

Stores data in the doctors table.

3. Appointment Booking
Takes inputs: Patient Name, Doctor Name, and Date.

Saves the record in the appointments table.

4. View All Records
Retrieves and displays all patients, doctors, and appointments.

Data is shown in a JTextArea wrapped inside a scrollable dialog.

üîπ 5. Technology Stack

Component	Technology Used
Programming Language	Java
GUI Toolkit	Swing (Javax.swing)
Database	MySQL
Database Connector	JDBC (MySQL Connector/J)
IDE (Recommended)	VS Code / IntelliJ IDEA / NetBeans
üîπ 6. Database Schema
patients Table

Column	Data Type
id	INT (Auto Increment)
name	VARCHAR(100)
age	INT
disease	VARCHAR(100)
doctors Table

Column	Data Type
id	INT (Auto Increment)
name	VARCHAR(100)
specialization	VARCHAR(100)
appointments Table

Column	Data Type
id	INT (Auto Increment)
patient_name	VARCHAR(100)
doctor_name	VARCHAR(100)
date	DATE
üîπ 7. Working Principle
The main window shows four buttons:

Register Patient

Register Doctor

Book Appointment

View Appointments

Clicking any button opens a specific form (JFrame) for that operation.

User input is collected using JTextFields.

On form submission, SQL queries (INSERT, SELECT) are executed using PreparedStatement or Statement.

Data is stored/retrieved from the MySQL database using JDBC.

Confirmation and error dialogs are shown using JOptionPane.

üîπ 8. Advantages of This System
‚úÖ Easy to use, beginner-friendly Swing-based interface.

‚úÖ Real-time data persistence using MySQL.

‚úÖ Modular and maintainable code structure.

‚úÖ Clear separation of concerns for GUI and database operations.

üîπ 9. Possible Enhancements
Add login authentication for admin and users.

Add search and delete functionality for patient/doctor records.

Improve UI design using advanced JavaFX or web frontend.

Add validation and error handling for inputs.

Enable report generation (PDF or Excel).

üîπ 10. Conclusion
This project successfully demonstrates how a hospital's core operations like registering patients and doctors, booking appointments, and viewing records can be automated using a simple Java GUI application. The integration with a MySQL database shows how backend connectivity can provide real-time data handling and improve healthcare administration workflows.

Aim:

To develop a simple, user-friendly desktop application that facilitates the registration and management of patients, doctors, and appointments in a healthcare center using Java Swing and MySQL.


---

Purpose:

The purpose of this project is to:

Automate and simplify administrative tasks in a small hospital or clinic.

Maintain a digital record of patients, doctors, and appointments.

Reduce manual work, paperwork, and the possibility of human errors.

Provide an intuitive GUI for healthcare staff to interact with the system.



---

Procedure:

1. Designing the GUI:

Used Java Swing components to create interactive windows for patient/doctor registration and appointment booking.



2. Database Setup:

Created a MySQL database (hospital_db) with tables: patients, doctors, and appointments.



3. Database Connection:

Established a connection between Java and MySQL using JDBC.



4. Implementing Features:

Added functionality to insert and retrieve data through user inputs in forms.

Displayed data using a JTextArea inside a JScrollPane.



5. Error Handling:

Included exception handling to manage SQL and input-related errors.





---

Key Features:

Graphical User Interface (GUI) using Java Swing.

Patient Registration: Add name, age, and disease.

Doctor Registration: Add name and specialization.

Appointment Booking: Schedule appointments by selecting patient, doctor, and date.

View All Records: Display lists of registered patients, doctors, and appointments.

Database Integration: MySQL used for data persistence.

Modular Design: Each function (patient, doctor, appointment) is managed through separate forms.

code-
package user;

import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class HospitalManagementSystem extends JFrame {

    static final String URL = "jdbc:mysql://localhost:3306/hospital_db";
    static final String USER = "root", PASSWORD = "MYSQL";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    public HospitalManagementSystem() {
        setTitle("üè• Wellness Center");
        setSize(400, 300);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        JPanel panel = new JPanel(new GridLayout(5, 1, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        panel.add(new JLabel("Wellness Center", SwingConstants.CENTER));

        String[] actions = {"Register Patient", "Register Doctor", "Book Appointment", "View Appointments"};
        for (String action : actions) {
            JButton btn = new JButton(action);
            panel.add(btn);
            btn.addActionListener(e -> handleAction(action));
        }

        add(panel);
        setVisible(true);
    }

    private void handleAction(String action) {
        switch (action) {
            case "Register Patient" -> openForm("patients", new String[]{"Name", "Age", "Disease"});
            case "Register Doctor" -> openForm("doctors", new String[]{"Name", "Specialization"});
            case "Book Appointment" -> openForm("appointments", new String[]{"Patient Name", "Doctor Name", "Date"});
            case "View Appointments" -> showAppointments();
        }
    }

    private void openForm(String table, String[] fields) {
        JFrame form = new JFrame("Add to " + table);
        form.setSize(300, 250);
        form.setLayout(new GridLayout(fields.length + 1, 2, 5, 5));
        JTextField[] inputs = new JTextField[fields.length];

        for (int i = 0; i < fields.length; i++) {
            form.add(new JLabel(fields[i] + ":"));
            inputs[i] = new JTextField();
            form.add(inputs[i]);
        }

        JButton submit = new JButton("Submit");
        form.add(new JLabel());
        form.add(submit);

        submit.addActionListener(e -> {
            try (Connection conn = getConnection()) {
                String placeholders = "?,".repeat(fields.length).replaceAll(",$", "");
                String sql = "INSERT INTO " + table + " VALUES (NULL, " + placeholders + ")";
                PreparedStatement ps = conn.prepareStatement(sql);
                for (int i = 0; i < fields.length; i++) {
                    ps.setString(i + 1, inputs[i].getText());
                }
                ps.executeUpdate();
                JOptionPane.showMessageDialog(form, table + " entry added!");
                form.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(form, "Error: " + ex.getMessage());
            }
        });

        form.setLocationRelativeTo(null);
        form.setVisible(true);
    }

    private void showAppointments() {
        JTextArea area = new JTextArea(15, 40);
        try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
            for (String table : new String[]{"patients", "doctors", "appointments"}) {
                area.append("\n" + table.toUpperCase() + ":\n");
                ResultSet rs = stmt.executeQuery("SELECT * FROM " + table);
                ResultSetMetaData md = rs.getMetaData();
                while (rs.next()) {
                    for (int i = 1; i <= md.getColumnCount(); i++) {
                        area.append(md.getColumnName(i) + ": " + rs.getString(i) + "  ");
                    }
                    area.append("\n");
                }
            }
        } catch (SQLException ex) {
            area.setText("Error: " + ex.getMessage());
        }
        JOptionPane.showMessageDialog(this, new JScrollPane(area), "Database Info", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(HospitalManagementSystem::new);
    }
}
